# A more complex OpenAPI spec with nested dependencies
openapi: 3.0.0
info:
  title: Complex Test API
  version: 2.0.0
  description: A complex API for testing advanced minification features

servers:
  - url: https://api.complex-example.com/v2

paths:
  /projects:
    get:
      operationId: getProjects
      tags: [Projects]
      summary: List projects
      responses:
        "200":
          description: Project list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectList"
    post:
      operationId: createProject
      tags: [Projects]
      summary: Create project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: Created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/{projectId}/issues:
    get:
      operationId: getProjectIssues
      tags: [Issues]
      summary: Get issues for project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Issue list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueList"
    post:
      operationId: createIssue
      tags: [Issues]
      summary: Create issue
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueRequest"
      responses:
        "201":
          description: Created issue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"

  /users/{userId}/projects:
    get:
      operationId: getUserProjects
      tags: [Users, Projects]
      summary: Get user's projects
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User's projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectList"

  /analytics/reports:
    get:
      operationId: getAnalyticsReports
      tags: [Analytics]
      summary: Get analytics reports
      responses:
        "200":
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsReport"

components:
  schemas:
    Project:
      type: object
      required:
        - id
        - name
        - owner
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          $ref: "#/components/schemas/User"
        team:
          type: array
          items:
            $ref: "#/components/schemas/TeamMember"
        settings:
          $ref: "#/components/schemas/ProjectSettings"
        metadata:
          $ref: "#/components/schemas/ProjectMetadata"

    ProjectList:
      type: array
      items:
        $ref: "#/components/schemas/Project"

    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        settings:
          $ref: "#/components/schemas/ProjectSettings"

    Issue:
      type: object
      required:
        - id
        - title
        - status
        - reporter
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/IssueStatus"
        priority:
          $ref: "#/components/schemas/Priority"
        reporter:
          $ref: "#/components/schemas/User"
        assignee:
          $ref: "#/components/schemas/User"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"

    IssueList:
      type: array
      items:
        $ref: "#/components/schemas/Issue"

    CreateIssueRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          $ref: "#/components/schemas/Priority"
        assignee:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        profile:
          $ref: "#/components/schemas/UserProfile"

    UserProfile:
      type: object
      properties:
        avatar:
          type: string
        bio:
          type: string
        skills:
          type: array
          items:
            $ref: "#/components/schemas/Skill"

    TeamMember:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            role:
              type: string
              enum: [owner, admin, developer, viewer]
            joinedAt:
              type: string
              format: date-time

    ProjectSettings:
      type: object
      properties:
        isPublic:
          type: boolean
        allowIssues:
          type: boolean
        defaultBranch:
          type: string

    ProjectMetadata:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    IssueStatus:
      type: string
      enum: [open, in_progress, resolved, closed]

    Priority:
      type: string
      enum: [low, medium, high, critical]

    Label:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        color:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time

    Skill:
      type: object
      properties:
        name:
          type: string
        level:
          type: string
          enum: [beginner, intermediate, advanced, expert]

    AnalyticsReport:
      type: object
      properties:
        period:
          type: string
        metrics:
          $ref: "#/components/schemas/Metrics"
        charts:
          type: array
          items:
            $ref: "#/components/schemas/Chart"

    Metrics:
      type: object
      properties:
        totalProjects:
          type: integer
        totalIssues:
          type: integer
        resolvedIssues:
          type: integer
        activeUsers:
          type: integer

    Chart:
      type: object
      properties:
        type:
          type: string
          enum: [line, bar, pie, scatter]
        title:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/DataPoint"

    DataPoint:
      type: object
      properties:
        label:
          type: string
        value:
          type: number
        timestamp:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
